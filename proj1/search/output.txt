Starting on 2-3 at 21:45:48

Question q1
===========

*** FAIL: Exception raised: '1:A->C'
*** 
*** Traceback (most recent call last):
***   File "/home/spencer/courses/ai/proj1/search/grading.py", line 76, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "/home/spencer/courses/ai/proj1/search/util.py", line 613, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 296, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/spencer/courses/ai/proj1/search/testClasses.py", line 58, in execute
***     if not f(grades):
***   File "autograder.py", line 291, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 202, in execute
***     solution, expanded_states, error = self.getSolInfo(search)
***   File "searchTestClasses.py", line 186, in getSolInfo
***     solution = alg(problem)
***   File "search.py", line 129, in depthFirstSearch
***     return map(lambda val: dirmap[val], directions)
***   File "search.py", line 129, in <lambda>
***     return map(lambda val: dirmap[val], directions)
*** KeyError: '1:A->C'
*** 

### Question q1: 0/2 ###


Question q2
===========

<type 'list'>
*** FAIL: Exception raised: '1:A->C'
*** 
*** Traceback (most recent call last):
***   File "/home/spencer/courses/ai/proj1/search/grading.py", line 76, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "/home/spencer/courses/ai/proj1/search/util.py", line 613, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 296, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/spencer/courses/ai/proj1/search/testClasses.py", line 58, in execute
***     if not f(grades):
***   File "autograder.py", line 291, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 202, in execute
***     solution, expanded_states, error = self.getSolInfo(search)
***   File "searchTestClasses.py", line 186, in getSolInfo
***     solution = alg(problem)
***   File "search.py", line 174, in breadthFirstSearch
***     return map(lambda val: dirmap[val], directions)
***   File "search.py", line 174, in <lambda>
***     return map(lambda val: dirmap[val], directions)
*** KeyError: '1:A->C'
*** 

### Question q2: 0/2 ###


Question q3
===========

*** FAIL: Exception raised: '1:A->C'
*** 
*** Traceback (most recent call last):
***   File "/home/spencer/courses/ai/proj1/search/grading.py", line 76, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "/home/spencer/courses/ai/proj1/search/util.py", line 613, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 296, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/spencer/courses/ai/proj1/search/testClasses.py", line 58, in execute
***     if not f(grades):
***   File "autograder.py", line 291, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 202, in execute
***     solution, expanded_states, error = self.getSolInfo(search)
***   File "searchTestClasses.py", line 186, in getSolInfo
***     solution = alg(problem)
***   File "search.py", line 221, in uniformCostSearch
***     return map(lambda val: dirmap[val], directions)
***   File "search.py", line 221, in <lambda>
***     return map(lambda val: dirmap[val], directions)
*** KeyError: '1:A->C'
*** 

### Question q3: 0/2 ###


Question q4
===========

*** FAIL: Exception raised: 'Right'
*** 
*** Traceback (most recent call last):
***   File "/home/spencer/courses/ai/proj1/search/grading.py", line 76, in grade
***     util.TimeoutFunction(getattr(gradingModule, q),300)(self) # Call the question's function
***   File "/home/spencer/courses/ai/proj1/search/util.py", line 613, in __call__
***     result = self.function(*args, **keyArgs)
***   File "autograder.py", line 296, in <lambda>
***     return lambda grades: question.execute(grades)
***   File "/home/spencer/courses/ai/proj1/search/testClasses.py", line 58, in execute
***     if not f(grades):
***   File "autograder.py", line 291, in <lambda>
***     return lambda grades: testCase.execute(grades, moduleDict, solutionDict)
***   File "searchTestClasses.py", line 202, in execute
***     solution, expanded_states, error = self.getSolInfo(search)
***   File "searchTestClasses.py", line 186, in getSolInfo
***     solution = alg(problem)
***   File "search.py", line 273, in aStarSearch
***     return map(lambda val: dirmap[val], directions)
***   File "search.py", line 273, in <lambda>
***     return map(lambda val: dirmap[val], directions)
*** KeyError: 'Right'
*** 

### Question q4: 0/3 ###


Question q5
===========

*** NOTE: Make sure to complete Question q2 before working on Question q5,
*** because Question q5 builds upon your answer for Question q2.


Question q6
===========

*** NOTE: Make sure to complete Question q4 before working on Question q6,
*** because Question q6 builds upon your answer for Question q4.


Question q7
===========

*** NOTE: Make sure to complete Question q4 before working on Question q7,
*** because Question q7 builds upon your answer for Question q4.


Question q8
===========

[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['North']
*** PASS: test_cases/q8/closest_dot_1.test
*** 	pacman layout:		Test 1
*** 	solution length:		1
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['East']
*** PASS: test_cases/q8/closest_dot_10.test
*** 	pacman layout:		Test 10
*** 	solution length:		1
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['North', 'North']
*** PASS: test_cases/q8/closest_dot_11.test
*** 	pacman layout:		Test 11
*** 	solution length:		2
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['North', 'North', 'East']
*** PASS: test_cases/q8/closest_dot_12.test
*** 	pacman layout:		Test 12
*** 	solution length:		3
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['South']
*** PASS: test_cases/q8/closest_dot_13.test
*** 	pacman layout:		Test 13
*** 	solution length:		1
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['East']
*** PASS: test_cases/q8/closest_dot_2.test
*** 	pacman layout:		Test 2
*** 	solution length:		1
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['East']
*** PASS: test_cases/q8/closest_dot_3.test
*** 	pacman layout:		Test 3
*** 	solution length:		1
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['East', 'East', 'East']
*** PASS: test_cases/q8/closest_dot_4.test
*** 	pacman layout:		Test 4
*** 	solution length:		3
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['East']
*** PASS: test_cases/q8/closest_dot_5.test
*** 	pacman layout:		Test 5
*** 	solution length:		1
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['East', 'East']
*** PASS: test_cases/q8/closest_dot_6.test
*** 	pacman layout:		Test 6
*** 	solution length:		2
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['South']
*** PASS: test_cases/q8/closest_dot_7.test
*** 	pacman layout:		Test 7
*** 	solution length:		1
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['East']
*** PASS: test_cases/q8/closest_dot_8.test
*** 	pacman layout:		Test 8
*** 	solution length:		1
[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
<type 'list'>
['East']
*** PASS: test_cases/q8/closest_dot_9.test
*** 	pacman layout:		Test 9
*** 	solution length:		1

### Question q8: 2/2 ###


Finished at 21:45:48

Provisional grades
==================
Question q1: 0/2
Question q2: 0/2
Question q3: 0/2
Question q4: 0/3
Question q5: 0/2
Question q6: 0/3
Question q7: 0/5
Question q8: 2/2
------------------
Total: 2/21

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

